//This file was generated by Tortuga Shipwright

namespace Tortuga.Chain.SqlServer.CommandBuilders
{
	partial class SqlServerTableOrView<TObject>: Tortuga.Chain.CommandBuilders.ISupportsCount64
	{

		private bool __TraitsRegistered;

		// These fields and/or properties hold the traits. They should not be referenced directly.
		private Traits.SupportsCount64Trait<Microsoft.Data.SqlClient.SqlCommand, Microsoft.Data.SqlClient.SqlParameter, Tortuga.Chain.SqlServerLimitOption> ___Trait0 = new();
		private Traits.SupportsCount64Trait<Microsoft.Data.SqlClient.SqlCommand, Microsoft.Data.SqlClient.SqlParameter, Tortuga.Chain.SqlServerLimitOption> __Trait0
		{
			get
			{
				if (!__TraitsRegistered) __RegisterTraits();
				return ___Trait0;
			}
		}

		// Explicit interface implementation Tortuga.Chain.CommandBuilders.ISupportsCount64
		Tortuga.Chain.ILink<long> Tortuga.Chain.CommandBuilders.ISupportsCount64.AsCount64()
		{
			return ((Tortuga.Chain.CommandBuilders.ISupportsCount64)__Trait0).AsCount64();
		}

		Tortuga.Chain.ILink<long> Tortuga.Chain.CommandBuilders.ISupportsCount64.AsCount64(System.String columnName, System.Boolean distinct)
		{
			return ((Tortuga.Chain.CommandBuilders.ISupportsCount64)__Trait0).AsCount64(columnName, distinct);
		}

		// Exposing trait Traits.SupportsCount64Trait<Microsoft.Data.SqlClient.SqlCommand, Microsoft.Data.SqlClient.SqlParameter, Tortuga.Chain.SqlServerLimitOption>

		/// <summary>
		/// Returns a 64 bit row count using a <c>SELECT Count(*)</c> style query.
		/// </summary>
		/// <returns></returns>
		public Tortuga.Chain.ILink<long> AsCount64()
		{
			return __Trait0.AsCount64();
		}

		/// <summary>
		/// Returns a 64 bit row count for a given column. <c>SELECT Count(columnName)</c>
		/// </summary>
		/// <param name="columnName">Name of the column.</param>
		/// <param name="distinct">if set to <c>true</c> use <c>SELECT COUNT(DISTINCT columnName)</c>.</param>
		/// <returns></returns>
		public Tortuga.Chain.ILink<long> AsCount64(System.String columnName, System.Boolean distinct = false)
		{
			return __Trait0.AsCount64(columnName, distinct);
		}

		private void __RegisterTraits()
		{
			__TraitsRegistered = true;
			__Trait0.CommandBuilder = this;
		}

	}
}

{
  "docs": [
    {
      "location": "DataSources.htm",
      "breadcrumbs": "Home / Data Sources",
      "keywords": "1 2 a A about abstract access achieve actual actually adapters additional ADO Advanced advantage Again all allowed also alter an and any Any app application applied appropriate are ArithAbort as At Automatic available back Basic be because become beginning beyond breaking Briefly builders Bulk but by cache caches caching Caching call callback called can capabilities capable catering chain Chain change changes class classifications Classifications classify columns command Command Commands common compiled config configuration Configuration connection constructor contains create created CreateFromConfig creating CRUD current Currently data Data database Database databases dataSource DataSource DBCommand DbConnectionStringBuilder Delete deletes denominator design designed develop developers do document does doesn each Each effect either etc every everything example Execute ExecuteCore executed ExecuteNonQuery ExecuteReader ExecuteScalar execution Execution exposing expressed extension Extension extensions factory features file flags flaws following for For found framework Framework from From full Function functionality functions generate GetExtensionData give gives going hang happens has have here However IClass1DataSource IClass2DataSource identifying if important in In include information insert Insert inserts instance intention interface interfaces Internals is it key keys know libraries like Limitations list loading logging lot lowest manage many matching materializer materializers Materializers may means meantime MemoryCache metadata Metadata method methods Milestone minimum mode more Most multiple name necessarily necessary need needed needs neither NET new no nor normal Normally not object of off offer offered on On once one only opened operations option optional Optionally or order Originally ORMs our out override overrides own pages parameters passed pattern per performance performed Platform plug popular portability primarily primary procedure Procedure processed processing project projects provide provides Query quickly rather Rather Raw reading realize reasonable repository represents reset results row running Runtime schema Separate Sequential Server servers set settings Settings settle should Single so some Some something source Source sources Sources specific Sql SQL start statements still store stored string String style subclass such support supporting sync System table tables take terms than that That the The there these These they this This those thought through time to token tokens turn turns types Universal update Update updates Upsert use used useful using UWP valued views want was way we We whether which while While will Windows with Within won word would writing XactAbort you your",
      "title": "Data Sources"
    },
    {
      "location": "From.htm",
      "breadcrumbs": "Home / Command Builders / From Command Builder",
      "keywords": "1 a able accepts add added against all All allowed an and AND ANSI applicable are Arguments array as attacks avaialble available avoid be Builder by calling can char checking clause column Column1 Column2 columns Command correct database databases DbParameter DbType degradation deleted deletes descending desired determine Dictionary enable expect experience Fetch filter filtered filters Filters for form forms from From generated generates Generation generator If in inferred injection instead Instead Internals is it It just keys latter Limitations limits Limits list materializer may method model more Most name names needed no Normally not object objects of Offset often one only Optionally or out parameter parameters pass performance prevent properties provide provided query random replaced required returned Roadmap rows s same sampling SELECT sent soft SortExpressions sorting Sorting sorts SQL statement string strings support table that the The them they this This to To Top type types use used uses using validated value Value1 Value2 varchar vary view what when When where WHERE which will with WithFilter WithLimits WithSorting won work you",
      "title": "From Command Builder"
    },
    {
      "location": "ByKey.htm",
      "breadcrumbs": "Home / Command Builders / By Key Command Builder",
      "keywords": "a accept against an and are Arguments as be builder Builders ByKey ByKeyList clause command Command compound DELETE DeleteByKey deterministic enhancement etc exact feature for form generate generates Generation GetByKey guid have in int is key keys Keys know Limitations list manner metadata must need newValues non normal object of on only Only or order Param Param1 Param2 Possible primary PrimaryKey provider require returned Roadmap Rows same scalar SELECT SET single Sorting SQL statement string support table tables that the The This to tuples UDPATE Update UPDATE UpdateByKey upgrade use used using values variants we WHERE will works would",
      "title": "By Key Command Builder"
    },
    {
      "location": "Insert.htm",
      "breadcrumbs": "Home / Command Builders / Insert Command Builder",
      "keywords": "a A able Again allows Alternately an and applied Arguments as at attribute auto back based be biggest Builder by clause column columns command Command construct create CreatedDate database defaulted desires dictionary echos for from Generation handle how identity IdentityInsert If IgnoreOnInsert Implementation in insert Insert INSERT inserted InsertOptions Internals IReadonlyDictionary is it keys Limitations marked match materializer may meant metadata model necessarily newly not number object objects of on one operate optional or original OUTPUT overriding parameter participate performs primary property provided question read returned Roadmap row SELECT separate Server set should SQL SQLite statement statment step string such the The this This time to type up used uses using usually values varies we We will with",
      "title": "Insert Command Builder"
    },
    {
      "location": "Update.htm",
      "breadcrumbs": "Home / Command Builders / Update Command Builder",
      "keywords": "a Again Alternately an Anchor and applied are Arguments as at attribute back based be behavior Builder but by can changed ChangedProperties ChangedPropertiesOnly clause columns command Command ComponentModel construct contain CreatedDate CretedBy database delete desires dictionary echos found from Generation If IgnoreOnUpdate Implementation in inserted interface Internals IPropertyChangeTracking IReadonlyDictionary is it key Key keys Limitations locate marked materializer may meant metadata model must namespace necessary need never normally not object of on one only operate operations option optional or OUTPUT override parameter participate performed performs primary Procedure properties property provided read record remaining Roadmap row s SELECT separate Server Set should SQL SQLite statement statment step string such that the The this This time to Tortuga type update Update UPDATE updated use used uses using usually varies will with you",
      "title": "Update Command Builder"
    },
    {
      "location": "UpdateSet.htm",
      "breadcrumbs": "Home / Command Builders / Update Set Command Builder",
      "keywords": "a accepts actually add all All Alternately an applied Arguments be being builder Builder case clause command Command do don each Each every expression filter Filters Generation If in In Internals match may Most object of operation optional or parameter pass performs records Roadmap row rows set Set SQL the The this This time to update Update updated UpdateSet use values want WHERE will with WithFilter you You",
      "title": "Update Set Command Builder"
    },
    {
      "location": "Upsert.htm",
      "breadcrumbs": "Home / Command Builders / Upsert Command Builder",
      "keywords": "3 a Again allows already Alternately an Anchor and application are Arguments as at atomic attribute attributes auto back based be behavior Builder but by can changed ChangedProperties ChangedPropertiesOnly column columns command Command ComponentModel condition contain correct database decide desires determines dictionary echos exception existing exists failing flag for found from Generation honor identity IdentityInsert if If IgnoreOnInsert IgnoreOnUpdate Implementation in inheritently insert Insert inserted interface Internals IPropertyChangeTracking IReadonlyDictionary is it key Key keys Limitations locate marked materializer may meant MERGE metadata model must namespace necessary need needs new non normally not number object occurs of on one only operate operation operations option or original override overriding parameter part performed performs primary Procedure process properties provided race read recently record requires retry returned Roadmap row s Select selected Server Set silently SQL SQLite step string that the The there this This throw time to Tortuga type update Update updated Upsert UpsertOptions Upserts upset use used using values varies via was whether will you",
      "title": "Upsert Command Builder"
    },
    {
      "location": "Delete.htm",
      "breadcrumbs": "Home / Command Builders / Delete Command Builder",
      "keywords": "a Again Alternately an and are Arguments as at attribute based be before behavior Builder but by can clause columns command Command contain database delete Delete DELETE deleted desires dictionary enabled flag for from generated Generation If Implementation Internals IReadonlyDictionary is it key Key keys Limitations locate looked materializer may meant metadata model must necessary need normally object of on one operate operation operations optional or OUTPUT override parameter performed performs primary Procedure properties provided read record return Roadmap row s SELECT separate Server set Set soft SQL SQLite statement string table that the The this This time to type update UPDATE use used uses using varies was will with you",
      "title": "Delete Command Builder"
    },
    {
      "location": "DeleteWithFilter.htm",
      "breadcrumbs": "Home / Command Builders / Delete with Filter Command Builder",
      "keywords": "a accepts an and Arguments based be Builder by clause command Command database delete Delete DELETE deleted deletes DeleteWithFilter enabled expression filter Filter flag for generated Generation If Implementation Internals is object of operation optional or OUTPUT parameter performs Roadmap SELECT separate Server set soft SQL SQLite statement table the The this This to update UPDATE uses using varies where will with",
      "title": "Delete with Filter Command Builder"
    },
    {
      "location": "SQL.htm",
      "breadcrumbs": "Home / Command Builders / SQL Command Builder",
      "keywords": "A able all An applicable arbitrary are Arguments attempt be Builder command Command database determine executes executing Generation generator IDictionary in Instead Internals It keys Limitations makes may model N no object of optional or paramterized paramters passing pre properties provided Roadmap said sent SQL string the them This to validate when When which will won",
      "title": "SQL Command Builder"
    },
    {
      "location": "TableFunction.htm",
      "breadcrumbs": "Home / Command Builders / Table Function Command Builder",
      "keywords": "1 a able accepts accounted add added against all All allowed an and AND ANSI applicable are arguments Arguments array as attacks avaialble available avoid be behavior Builder by calling can caused char checking clause column Column1 Column2 columns Command correct database databases dataSource DbParameter DbType degradation descending desired determine Dictionary Do except experience expression Fetch filter filtered filters Filters for form forms from From function Function functions generated generates Generation generator If in inferred injection instead Instead Internals is it It just keys latter Limitations limits Limits list materializer may method model more Most must name names needed no Normally not object objects of Offset often one only Optionally or parameter parameters part pass performance prevent properties provide provided query random replaced required returned Roadmap rows s same sampling SELECT sent Some SortExpressions sorting Sorting sorts SQL statement string strings support table Table TableFunction that the The them they this This to To Top type types unintended use used uses using validated value Value1 Value2 valued varchar vary what when When where WHERE which will with WithFilter WithLimits WithSorting won work you",
      "title": "Table Function Command Builder"
    },
    {
      "location": "ScalarFunction.htm",
      "breadcrumbs": "Home / Command Builders / Scalar Function Command Builder",
      "keywords": "a accounted against All are arguments Arguments as be Builder but column Command database dataSource don for function Function functions generates instead Internals method must of parameters part provided result Roadmap row scalar Scalar ScalarFunction SELECT single Some statement support table the This use valued with",
      "title": "Scalar Function Command Builder"
    },
    {
      "location": "Procedure.htm",
      "breadcrumbs": "Home / Command Builders / Procedure Command Builder",
      "keywords": "a ALL amount an and applied Arguments as automatically be Builder building call can cannot causes Chain command Command CommandTimeout CommandType compared create cursor cursor_name cursors Cursors data DereferenceCursors dereferenced dereferences dereferencing doesn doubles each effectively execute executed exist FETCH for function functions Generation get IDictionary if If in IN Internals is it list match may misleading model more object objects of on once one only or outside parameter paratmeters passed PostgreSQL PostgreSqlCommandExecutionToken procedure Procedure provided record refcursor return Roadmap semantics Server set sets sources SQL standard stored StoredProcedure string take that the The Then theoretically they This those time to transaction transacton true twice use used value When Where will",
      "title": "Procedure Command Builder"
    },
    {
      "location": "NonQuery.htm",
      "breadcrumbs": "Home / Materializers / Non-Query Materializers",
      "keywords": "a accurate affected are AsNonQuery AsRowsAffected be count DbCommand example ExecuteNonQuery For generation Generation has if in Internals is Limitations materializers Materializers materialziers necessarily no NoColumns NOCOUNT Non not nothing number of ON participating procedure Query report respond return returns Roadmap rows SET SQL stored the The then there There These to two use uses value when while will with",
      "title": "Non-Query Materializers"
    },
    {
      "location": "Scalar.htm",
      "breadcrumbs": "Home / Materializers / Scalar Materializers",
      "keywords": "a above accepts All an are as As AutoSelectDesiredColumns avaialable avaialble be builder by clause column command common date DbCommand else etc evaluated Everything ExecuteScalar first for generating Generation If ignored in indicated Internals is materailizer materializers Materializers materializes may means mentioned name NET no Nullable numerics of only optional Options request returned Roadmap row scalar Scalar SELECT silently specific SQL string such that the The then this This time to types use used versions when",
      "title": "Scalar Materializers"
    },
    {
      "location": "List.htm",
      "breadcrumbs": "Home / Materializers / List Materializers",
      "keywords": "1 2 24 3 4 5 6 a above accepts all an are as As AutoSelectDesiredColumns avaialble based be bottom builder but by can cause clause column columnName columns command common date discard DiscardNulls do error etc example flag FlattenExtraColumns for For from generating generation Generation if If ignore ignored IgnoreExtraColumns in included indicated instead interesting Internals is left like list List materailizer materializers Materializers may mentioned multiple name NET no Normally null numerics one only operates optional Options parameter parsing pass populating procedure raised read request result resulting Resultset returned returns right Roadmap SELECT set specific SQL stored string such Task that the The them then things this This time to top types used values we when will You",
      "title": "List Materializers"
    },
    {
      "location": "Object.htm",
      "breadcrumbs": "Home / Materializers / Object/Collection Materializers",
      "keywords": "a above AcceptChanges allows and any applied apply are as As attribute automatically be behavior being by called can cannot Capabilities changes child chosen collection Collection CollectionOptions column Column columns constructor Constructors correctly cycles Decompose decomposed default desried doesn entire enumeration exception fields for from generated Generation graph honor IChangeTracking ICollection if If implementes in In indicated InferConstructor instantiate Instead Internals is isn it It Limitations List long mapped match materializer materializers Materializers method names needs non Non NotMapped object Object occur of on one only option Options or overflow override parameter per populate prevent properties property public query read reflection represented requested require result returns Roadmap RowOptions set setting so SQL stack supports t TCollection that the The then there they This to TObject ToCollection ToImmutableArray ToImmutableList ToObect ToObject type types unless use using walk when which will with With WithConstructor you You",
      "title": "Object/Collection Materializers"
    },
    {
      "location": "Compiled.htm",
      "breadcrumbs": "Home / Materializers / Compiled Object/Collection Materializers",
      "keywords": "63 64 a AcceptChanges allows and any applied are as attribute automatically be Because being by called can cannot Capabilities Chain changes child collection Collection column Column columns com compiled Compiled CompiledMaterializers constructors correctly CS cycles database Decompose decomposed default design desried do does entire enumeration Eventually example exception fields fixed For from generate Generation generic github graph honor https IChangeTracking ICollection if If immutable implementes in int Internals is isn issues it It later less like limitation Limitations List long Long mapped match matches materializer materializers Materializers methods mis needs nested non not NotMapped Nullable object Object objects occur of on only Options or other overflow override package populate population prevent properties property public query read reflection represented require restrictions result returns Roadmap RowOptions Script See set sidestep so SQL stack support supports t T TCollection than that the The then there they This to TObject ToCollection tolerant ToObect ToObject Tortuga TortugaResearch type types use version versions visibility walk we when which will with would you You",
      "title": "Compiled Object/Collection Materializers"
    },
    {
      "location": "DataTable.htm",
      "breadcrumbs": "Home / Materializers / DataRow/Table/Set Materializers",
      "keywords": "a advantage and any are associated behavior being bindable builder but columns command data DataRow DataSet DataTable do enumeration equivalents expects for Forms Generation grids have in legacy list materializers Materializers names not of Options request Row RowOptions See slower SQL support supports table Table TableSet than the These They to ToDataRow ToDataSet types WebForms Windows",
      "title": "DataRow/Table/Set Materializers"
    },
    {
      "location": "Table.htm",
      "breadcrumbs": "Home / Materializers / Row, Table, and TableSet Materializers",
      "keywords": "a A an and any are array as associated based be behavior both builder can columns command consumption DataRow DataSet DataTable dictionary do enumeration equivalents even expects faster for Generation if immutable implementation implemented importantly improved improvements in internal Internals is legacy Likewise list looking materializers Materializers memory modern more names not objects of Options performance probably re request Roadmap Row RowOptions See SQL supports switch table Table TableSet than the These to ToRow ToTableSet versions we We while",
      "title": "Row, Table, and TableSet Materializers"
    },
    {
      "location": "Caching.htm",
      "breadcrumbs": "Home / Appenders / Caching Appenders",
      "keywords": "a accepts access ALL AllCacheKey allow and appenders Appenders as be between built cache Cache CacheAllItems CacheKey CachePolicy caching Caching can case chain class coded collections const current Currently data Delete DeleteByKey each Employee EmployeeCachingRepository EmployeeKey entity example Example Execute for framework From function generates get Get GetAll GetByKey hard HR IClass1DataSource id IList in In individual Insert int Internals interplay InvalidateCache is It key keys Keys latter lists MemoryCache NET null object objects of on only operates or out plan policy Policy private protected provided public ReadOrCache records Repository result return returns Roadmap see seperately set source Source special string swapped TableName that the The this to ToCollection ToObject Update use using Value void x you",
      "title": "Caching Appenders"
    },
    {
      "location": "Tracing.htm",
      "breadcrumbs": "Home / Appenders / Tracing Appenders",
      "keywords": "a accepts appender appenders Appenders are Arguments DataSource debugging event events for For generic Internals listen logging more on OnCommandBuilt others purposes Roadmap TextWriter the The These tracing Tracing used useful usually while WithTracing WithTracingToConsole WithTracingToDebug",
      "title": "Tracing Appenders"
    },
    {
      "location": "SqlDependency.htm",
      "breadcrumbs": "Home / Appenders / Change Notification Appenders",
      "keywords": "23 accepts an and appender Appenders Arguments aspx associated attempting Automatic be before cache Chain change Change com data database delegate Dependency detects en essential event fired fires for future github have https if implemented Internals invalidation is issues it It library microsoft msdn Notification of on Once OnChangeEventHandler one Only planned read reattached requirements Roadmap Server SQL sqlclient sqldependency system that the The this This time to top Tortuga TortugaResearch understand us use using which will WithChangeNotification you",
      "title": "Change Notification Appenders"
    },
    {
      "location": "AuditRules.htm",
      "breadcrumbs": "Home / Audit Rules",
      "keywords": "1 a A add all allow amount an Anchor and any application applied apply appropriate are as As at audit Audit automatically be before beginning BeginTransaction boilerplate by By cached calling can cannot chain Chain clause code column columns combined common condition constraints context contextual correct correctly create created Created CreatedByKey CreatedDate currentUser Custom customer Customer data dataSource date Date DateTimeKind DateTimeOffsetRule DateTimeRule delete Delete deleted DeletedByKey DeletedDate DeletedFlag deletes Dependency Depending DI different do drastically effect enabled enforced ensure error even example Example Execute exists fields filter First following for For framework from From function hard has honoring IDataErrorInfo if If IgnoreOnUpdate implements in indicated individual inherits initiated inject Injection INotifyDataErrorInfo insert Insert InsertOrUpdate instead interface interfaces is it its IValidatable level like Likewise Local long looks manually marked may model ModelBase multiple myDS necessary need needed new no normal not Note object occur of on only operation operations OperationType OperationTypes or out own performing record records reduce replaces report request require restrictions rewrite rule rules Rules s saving scenarios select selectively SelectOrDelete set setting should so soft Soft SoftDeleteRule source sources steps subclass such support Support supports switch tables that the them then There these These this This though to To together Tortuga trans transactional Transactions trigger Triggering triggers two update Update updated Updated UpdatedByKey UpdatedDate use used user UserDataRule UserKey using Usually valid Validate ValidateWithDataErrorInfo validation Validation ValidationRule value var verifying version what when When WHERE wide will with without WithRules WithUser work x you You your",
      "title": "Audit Rules"
    },
    {
      "location": "RestrictedColumns.htm",
      "breadcrumbs": "Home / Restricted Columns",
      "keywords": "a access actually admin after against all allows an An and any applied are audit Audit based be BeginTransaction being block blocks built button bypass can card cases Chain check column columns Columns combined Commit context credit CreditCardNumber csharp currentUser customer data DataSource do ds effect enable ensure even example ExceptWhenPredicate executed exposed fails find for For from function functionality generation generator globally granting HasRoles have Here if If Implementation in insert Insert intended interesting is IsAdmin IsAdminCheck IsManger it LastUpdatedDate limit managers may means mixed most multiple need new non not Notes number of on Once only operation operations OperationTypes or other participate particular payment PaymentResolutionManager perform performed performing possible pressing prevents privileges procedures process put read reads resolution RestrictColumn restricted Restricted restriction restrictions rule rules Rules s same save say see Select setting setup shouldn skip So specific SQL still stored support syntax t table tables that the themselves There These they this This though to top transaction universally update Update UpdatedBy Usage user users Users UserToken using var via views want way We Whenever where while While will with within WithRules WithUser would write writes you You your",
      "title": "Restricted Columns"
    },
    {
      "location": "Transactions.htm",
      "breadcrumbs": "Home / Transactions",
      "keywords": "a Active activeConnection activeTransaction address also an An and another any are AsInt32 associated attach Attaching Basic be BeginTransaction by call calling can cannot Chain close commit Commit connection Connections contain created CreateOpenDataSource creates csharp customer Customer CustomerAddress CustomerKey data database dataSource do does Execute existing happens in include Insert it itself just like limited managed may means mixing need newKey normal not object on open openDataSource Optionally or ORM other own pass resource should simply so source sources statement that the then There they this This times to To trans transaction transactional Transactional transactions Transactions used using usually var when which with you",
      "title": "Transactions"
    },
    {
      "location": "MasterDetail.htm",
      "breadcrumbs": "Home / Master/Detail",
      "keywords": "a A accept also an and appender as be by By c can child collection collections Customer CustomerId CustomerKey dataSource default detail Detail discard done e each Each entirely error Execute expression following for foreign from function g GetCustomersWithOrders have Id If IgnoreUnmatchedChildren in include Internals into is it join Join key lambda Loading mapping maps master Master match matched memory multi multiple Multiple MultipleParents must name nameof object objects occurs of on one only options Options or Order Orders Other pair parallel Parallel parent perform PLINQ predicate primary procedure Procedure property provide record records Records recordsets Recordsets relationships result returns Roadmap SearchParameter set Silently specifier split stored Take takes that the The their This to ToCollectionSet two unmatched use Use useful will x you You",
      "title": "Master/Detail"
    },
    {
      "location": "EntityFramework.htm",
      "breadcrumbs": "Home / Entity Framework Integration",
      "keywords": "a accurately also An and any are as at be being botom cache called calling can Chain ChainForEntityFramework class Class close closed Closed code combined ConcurrentDictionary connection Connection ConnectionState ConnectionString context CreateOpenDataSource csharp currently CurrentTransaction data Database dataSource dataSourceFactory DbContext discard do Do done EF Entity example extension factory first Framework from From Func have IClass2DataSource if If immediately in include Integration invoke IRootDataSource is it may methods more name necessary need new Normally not occasionally of Once Open operations Or page param participating particpate performs project public Really register RegisterDataSource registered registering Registers reopen results return s_DataSources SaveChanges shown source startup State static string summary T that the The then this to To transaction typeparam UnderlyingTransaction use using var void what where will with would you You your",
      "title": "Entity Framework Integration"
    },
    {
      "location": "NHibernate.htm",
      "breadcrumbs": "Home / NHibernate Integration",
      "keywords": "1 1583 a accurately after also any are as at ayende be before blog botom by cache caching call can casts Chain ChainForNHibernate class Class code com combined command commands ConcurrentDictionary connection Connection ConnectionString CreateCommand CreateOpenDataSource creating csharp currently data dataSource dataSourceFactory DbConnection DbTransaction difference do done each Enlist extension extracted factory first Flush for from From Func GetTransaction hate have http i IClass2DataSource IDbTransaction if If implicitly important improve in include input Integration internal invoke invoking IRootDataSource is ISesion ISession ISessionFactory itself just lifetime may memory metadata methods minimal more most name necessary need new NHibernate Normally not object of Once OpenSession operations Or order page param parameter participating particpate performs private project public register RegisterDataSource registered registering Registers results return root s_DataSources session sessionFactory shared should shown slighly source startup state static string such summary T that the The These this to To transaction Transaction typeparam usage use using var Version void where will wish with won would you You your",
      "title": "NHibernate Integration"
    }
  ]
}